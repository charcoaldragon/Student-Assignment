def initialiseBoard(width):
    midlower=int(width/2-1)
    midupper=int(width/2)
    if width%2==1:
        print('Board must be an even width.')    #error checking
        return []
    if width<4:
        print('Board width must be at least 4.')
        return []
    board=[[0 for k in range(width)]for k in range(width)]  #blank board
    board[midlower][midlower]=1                             #placing 4 starting pieces
    board[midlower][midupper]=-1
    board[midupper][midlower]=-1
    board[midupper][midupper]=1
    return board

def drawBoard(board):
    squarewidth=boardwidth//((len(board))+2)
    squareylocation=-boardwidth//2+squarewidth
    rownum=0
    for row in board:
        squarexlocation=-boardwidth/2+squarewidth
        squarenum=0
        for square in row:
            drawsquare(squarexlocation,squareylocation,squarewidth)
            if square!= 0:
                drawpiece(squarenum,rownum,board,str(square).isdigit())
            squarexlocation+=squarewidth
            squarenum+=1
        squareylocation+=squarewidth
        rownum+=1
    ts.update()

def drawpiece(column,row,board,player):
    squarewidth=boardwidth//(len(board)+2)
    piecexlocation=(-boardwidth//2)+((3/2)*squarewidth)+(column*squarewidth)
    pieceylocation=(-boardwidth//2)+((21/20)*squarewidth)+(row*squarewidth)
    t.up()
    t.goto(piecexlocation,pieceylocation)
    t.down()
    t.fillcolor((colours[player]))
    t.begin_fill()
    t.circle((squarewidth*9)//20)
    t.end_fill()
    
def drawsquare(x,y,size): 
    t.up()
    t.goto(x,y)
    t.down()
    t.fillcolor((20,120,10))
    t.begin_fill()
    for steps in range(4):
        t.fd(size)
        t.left(90)
    t.end_fill() 

def move(b,m,p):
    direction = m[2];
    r = m[0];
    c = m[1];
    if(p==1): #Set the value of the first element
        b[r][c] = 1;
    else:
        b[r][c] = -1;
    for mv in direction: #Cycle through direction
        if(p==1):
            ct = 0;
            while(ct < len(b)):
                if(b[r + (mv[0] * ct)][c + (mv[1] * ct)] < 0):
                    b[r + (mv[0] * ct)][c + (mv[1] * ct)] = abs(b[r + (mv[0] * ct)][c + (mv[1] * ct)]) + 1;
                ct+=1;
        else:
            ct = 0;
            while(ct < len(b)):
                if(b[r + (mv[0] * ct)][c + (mv[1] * ct)] > 0):
                    b[r + (mv[0] * ct)][c + (mv[1] * ct)] = -((b[r + (mv[0] * ct)][c + (mv[1] * ct)]) + 1);
                ct+=1;
    return b;

def legalDirection(r, c, b, p, u, v):
    ct = 0; p1Count = 0; p2Count = 0;
    if(p==1):
        while (ct < len(b)):
            object = b[r + (u * ct)][c + (v * ct)]
            if(object > 0):
                p1Count+=1
            elif(object < 0):
                p2Count+=1
            ct+=1
        if(p1Count >= 1 and p2Count >= 1):
            return True
        else:
            return False
    else:
        while (ct < len(b)):
            object = b[r + (u * ct)][c + (v * ct)]
            if(object > 0):
                p1Count+=1
            elif(object < 0):
                p2Count+=1
            ct+=1
        if(p1Count >= 1 and p2Count >= 1):
            return True
        else:
            return False

def legalMove(r,c,b,p):
    return[]

def moves(b,p):
    return[]

def selectMove(ms,b,p):
    return[]

def scoreBoard(board):
    Blackscore=sum([board[y][x] for y in range(len(board)) for x in range(len(board)) if str(board[y][x]).isdigit()])
    Whitescore=abs(sum([board[y][x] for y in range(len(board)) for x in range(len(board)) if not str(board[y][x]).isdigit()]))
    return (Blackscore,Whitescore)

def main():
    t=turtle.Turtle()
    t.hideturtle()
    t.speed('fastest')
    t.pensize(2)
    ts=t.getscreen()
    ts.bgcolor('brown')
    ts.colormode(255)
    ts.tracer(0)
    if ts.window_height()<ts.window_width():
        boardwidth=ts.window_height()
    else: boardwidth=ts.window_width()
    players={1:'Black',-1:'White'}
    colours={True:'Black',False:'White'}
    drawBoard(initialiseBoard(int(ts.numinput('Board Size','How many (even) rows on the board?(n>4)',4))))
    return[]
