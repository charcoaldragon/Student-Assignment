def initialiseBoard(width):
    board=[]
    if not width%2==0:
        return('Board must be an even width.')
    if width<4:
        return('Board width must be at least 4')
    lowermid=(width/2)-1
    uppermid=(width/2)
    for numberrow in range(width):
        row=[]
        for square in range(width):
            if numberrow==lowermid or numberrow==uppermid:
                if square==lowermid or square==uppermid:
                    if square==numberrow:
                        row.append(1)
                    else:
                        row.append(-1)
                else:
                    row.append(0)
            else:
                row.append(0)
            print(square)
            print(numberrow)
            print(row)
        board.append(row)
        print(board)
        print(lowermid)
        print(uppermid)
    return board

def drawBoard(board):
    return[]

def move(b,m,p):
    direction = m[2];
    r = m[0];
    c = m[1];
    if(p==1): #Set the value of the first element
        b[r][c] = 1;
    else:
        b[r][c] = -1;

    for mv in direction: #Cycle through direction
        if(p==1):
            if(b[r + mv[0]][c + mv[1]] < 0):
                b[r + mv[0]][c + mv[1]] = abs(b[r + mv[0]][c + mv[1]]) + 1;
        else:
            if(b[r + mv[0]][c + mv[1]] > 0):
                b[r + mv[0]][c + mv[1]] = -((b[r + mv[0]][c + mv[1]]) + 1);
    return b;

def legalDirection(r,c,b,p,u,v):
    return[]

def legalMove(r,c,b,p):
    return[]

def moves(b,p):
    return[]

def selectMove(ms,b,p):
    return[]

def scoreBoard(b):
    return[]

def main():
    return[]
