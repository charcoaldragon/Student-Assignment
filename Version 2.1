import turtle
import copy
import time

def initialiseBoard(width):
    midlower=int(width/2-1)
    midupper=int(width/2)
    if width%2==1:
        print('Board must be an even width.')           #error checking
        return []
    if width<4:
        print('Board width must be at least 4.')
        return []
    b=[[0 for k in range(width)]for k in range(width)]  #blank board
    b[midlower][midlower]=1                             #placing 4 starting pieces
    b[midlower][midupper]=-1
    b[midupper][midlower]=-1
    b[midupper][midupper]=1
    return b

def drawBoard(b):
    sqlen=blen//(len(b)+2)
    squareylocation=-blen//2+sqlen
    rownum=0
    for row in b:
        squarexlocation=-blen/2+sqlen
        squarenum=0
        for square in row:
            drawsquare(squarexlocation,squareylocation,sqlen)
            if square!= 0:
                drawpiece(rownum,squarenum,b,square/abs(square))
            squarexlocation+=sqlen
            squarenum+=1
        squareylocation+=sqlen
        rownum+=1
    ts.update()

def drawpiece(r,c,b,p):
    sqlen=blen//(len(b)+2)
    xpos=(-blen//2)+((3/2)*sqlen)+(c*sqlen)
    ypos=(-blen//2)+((21/20)*sqlen)+(r*sqlen)
    t.up()
    t.goto(xpos,ypos)
    t.down()
    t.fillcolor((players[p]))
    t.begin_fill()
    t.circle((sqlen*9)//20)
    t.pencolor(players[p*-1])
    t.write(abs(b[r][c]),False,'center',('Arial', sqlen//2, 'bold'))
    t.pencolor('black')
    t.end_fill()
    
def drawsquare(x,y,size): 
    t.up()
    t.goto(x,y)
    t.down()
    t.fillcolor((20,120,10)) #dark green
    t.begin_fill()
    for steps in range(4):
        t.fd(size)
        t.left(90)
    t.end_fill()

def move(b,mv,p):
    r = mv[0]
    c = mv[1]
    directions = mv[2]
    b[r][c]= p                                          #Changes Blank space into player piece
    drawpiece(r,c,b,p)                                  #Draws player piece
    for (u,v) in directions:                            #Cycle through directions of the particular move
        check=0
        for k in range(1,len(b)):
            nr=r+u*k
            nc=c+v*k
            if check==0:
                squarevalue=b[nr][nc]
                if squarevalue/abs(squarevalue)!= p:    #Assumes correct moves from previous functions
                    b[nr][nc] = (-(squarevalue-p))
                    drawpiece(nr,nc,b,p)
                else: check+=1
    ts.update()
    return b

def legalDirection(r,c,b,p,u,v):
    return checkline(r,c,b,p,u,v,0)                     #does the direction capture pieces

def checkline(r,c,b,p,u,v,ct):                          #ct starts at zero from calling in legalDirection
    if r+u>=0 and r+u<len(b) and c+v>=0 and c+v<len(b): #If new square is on the Board
        squarevalue=b[r+u][c+v]
        if squarevalue==0:                              #Cannot capture over blank squares
            return False
        elif squarevalue/abs(squarevalue)==-p:          #Must find at least one opponent piece
            return checkline(r+u,c+v,b,p,u,v,ct+1)
        elif squarevalue/abs(squarevalue)==p and ct>0:  #Must find own piece at end point and at least 1 opponent piece in between
            return True
    return False

def legalMove(r,c,b,p):
    if b[r][c]==0:
        return [(u,v) for u in [-1,0,1] for v in [-1,0,1] if (u,v)!=(0,0) if legalDirection(r,c,b,p,u,v)] #list of capture directions for a legal move
    else: return []

def moves(b,p):
    return [(r,c,legalMove(r,c,b,p)) for r in range(len(b)) for c in range(len(b)) if legalMove(r,c,b,p)!=[]] #list of legal moves that can be selected by a player

def selectMove(ms,b,p):
    '''
    This function may need a doc string to describe
    what the function does and why it is a good move.
    '''
    if ms == []:
        return []
    else:
        scoreofmoves=[]
        for mv in ms:
            if mv[0]==0:                                                                            #prioritises corner squares
                if mv[1]==0 or b[mv[0]][mv[1]] is b[mv[0]][-1]:
                    return mv
            elif b[mv[0]] is b[-1]:
                if mv[1]==0 or b[mv[0]][mv[1]] is b[mv[0]][-1]:
                    return mv
            elif mv[0]==0 or mv[1]==0 or b[mv[0]] is b[-1] or b[mv[0]][mv[1]] is b[mv[0]][-1]:      #next priority: side squares
                return mv
            else:                                                                                   #makes the move that gives the greatest scoreboard advantage
                nb=copy.deepcopy(b)                                                                 #makes new board to check theoretical moves
                scoreofmoves.append(scoreBoard(move(nb,mv,p)))
        diffscores=[black - white for (black,white) in scoreofmoves]
        if p==1:
            return ms[scoreofmoves.index(max(diffscores))]
        else:
            return ms[scoreofmoves.index(min(diffscores))]

def scoreBoard(b):
    Blackscore=sum([b[r][c] for r in range(len(b)) for c in range(len(b)) if str(b[r][c]).isdigit()])
    Whitescore=abs(sum([b[r][c] for r in range(len(b)) for c in range(len(b)) if not str(b[r][c]).isdigit()]))
    return (Blackscore,Whitescore)

def main():
    #ts.numinput(players[player]+"'s Turn",'Enter row number',1,len(b)) #For player turn input
    b=initialiseBoard(int(ts.numinput('Board Size','How many (even) rows on the board?(n>4)',8,4)))
    drawBoard(b)
    counterp1=0
    counterp2=0
    p=-1
    for turn in range(len(b)**2-4):
        p=-p
        Turn(b,p)
        if p==1:
            counterp1+=1
        else:
            counterp2+=1
        print(counterp1)
        print(counterp2)

def Turn(b,p):
    if moves(b,p)==[]:          #Is there a legal move
        if moves(b,-p)==[]:     #Can neither player move
            print("GAME OVER")  #No Moves Left
        else:
            p=-p                #Player's turn is skipped
            Turn(b,p)
    else:
        print(p,moves(b,p)[0],b,p)
        move(b,selectMove(moves(b,p),b,p),p)
        #time.sleep(3)

t=turtle.Turtle()
t.hideturtle()
t.speed('fastest')
t.pensize(2)
ts=t.getscreen()
ts.bgcolor('brown')
ts.colormode(255)
ts.tracer(0)
if ts.window_height()<ts.window_width():    #Global variable used by later functions for size of squares and pieces
    blen=ts.window_height()
else: blen=ts.window_width()                  
players={1:'Black',-1:'White'}              #Primarily for choice of fill colours and piece labeling

main()
